// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Token from "../Auth/Token.bs.js";
import * as React from "react";
import * as Mutations from "../Mutations.bs.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

function reducer(state, action) {
  if (typeof action === "number") {
    return /* record */Caml_chrome_debugger.record([
              "remember",
              "email",
              "password",
              "error"
            ], [
              !state[/* remember */0],
              state[/* email */1],
              state[/* password */2],
              state[/* error */3]
            ]);
  } else {
    switch (action.tag | 0) {
      case 0 : 
          return /* record */Caml_chrome_debugger.record([
                    "remember",
                    "email",
                    "password",
                    "error"
                  ], [
                    state[/* remember */0],
                    state[/* email */1],
                    state[/* password */2],
                    action[0]
                  ]);
      case 1 : 
          return /* record */Caml_chrome_debugger.record([
                    "remember",
                    "email",
                    "password",
                    "error"
                  ], [
                    state[/* remember */0],
                    action[0],
                    state[/* password */2],
                    state[/* error */3]
                  ]);
      case 2 : 
          return /* record */Caml_chrome_debugger.record([
                    "remember",
                    "email",
                    "password",
                    "error"
                  ], [
                    state[/* remember */0],
                    state[/* email */1],
                    action[0],
                    state[/* error */3]
                  ]);
      
    }
  }
}

function isFetching(param) {
  if (typeof param === "number") {
    return param === 0;
  } else {
    return false;
  }
}

function Login2(Props) {
  var match = React.useReducer(reducer, /* record */Caml_chrome_debugger.record([
          "remember",
          "email",
          "password",
          "error"
        ], [
          false,
          "",
          "",
          undefined
        ]));
  var dispatch = match[1];
  var state = match[0];
  var request = Mutations.Login[/* make */3](state[/* email */1], state[/* password */2], /* () */0);
  var match$1 = Curry._1(ReasonUrql.Hooks[/* useMutation */0], request);
  var loginMutation = match$1[1];
  var loginResponse = match$1[0];
  var login = function (token) {
    var match = state[/* remember */0];
    if (match) {
      return Token.setToken(token);
    } else {
      return /* () */0;
    }
  };
  React.useEffect((function () {
          var match = loginResponse[/* response */3];
          if (typeof match === "number") {
            match === 0;
          } else if (match.tag) {
            Curry._1(dispatch, /* Error */Caml_chrome_debugger.variant("Error", 0, ["Combinação de email e senha invalidos"]));
          } else {
            Belt_Option.map(match[0].login, (function (loginResp) {
                    var token = Belt_Option.getExn(loginResp.token);
                    login(token);
                    return ReasonReactRouter.push("/");
                  }));
          }
          return undefined;
        }), /* array */[loginResponse[/* response */3]]);
  return React.createElement("div", {
              className: "bg-purple-700 min-h-screen flex flex-col"
            }, React.createElement("div", {
                  className: "flex flex-col items-center"
                }, React.createElement("div", {
                      className: "bg-white mt-6 p-12"
                    }, React.createElement("h2", {
                          className: "font-semibold text-2xl text-center mb-8 px-10"
                        }, "Faça login na sua conta"), Belt_Option.mapWithDefault(state[/* error */3], null, (function (err) {
                            return React.createElement("div", {
                                        className: "bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-8",
                                        role: "alert"
                                      }, err);
                          })), React.createElement("form", {
                          className: "flex flex-col"
                        }, React.createElement("input", {
                              className: "mb-5 p-3 border border-gray-300 rounded",
                              placeholder: "Endereço de e-mail",
                              type: "text",
                              value: state[/* email */1],
                              onChange: (function (e) {
                                  var email = e.currentTarget.value;
                                  return Curry._1(dispatch, /* ChangeEmail */Caml_chrome_debugger.variant("ChangeEmail", 1, [email]));
                                })
                            }), React.createElement("input", {
                              className: "mb-5 p-3 border border-gray-300 rounded",
                              placeholder: "Senha",
                              type: "password",
                              value: state[/* password */2],
                              onChange: (function (e) {
                                  var password = e.currentTarget.value;
                                  return Curry._1(dispatch, /* ChangePassword */Caml_chrome_debugger.variant("ChangePassword", 2, [password]));
                                })
                            }), React.createElement("div", {
                              className: "flex text-xs mb-5"
                            }, React.createElement("div", {
                                  className: "flex cursor-pointer",
                                  onClick: (function (_e) {
                                      return Curry._1(dispatch, /* ToggleRemeber */0);
                                    })
                                }, React.createElement("input", {
                                      className: "cursor-pointer my-auto",
                                      checked: state[/* remember */0],
                                      readOnly: true,
                                      type: "checkbox"
                                    }), React.createElement("label", {
                                      className: "ml-2 cursor-pointer"
                                    }, "Lembrar de mim")), React.createElement("a", {
                                  className: "ml-auto cursor-pointer hover:text-blue-500"
                                }, "Esqueceu sua senha?")), React.createElement("button", {
                              className: "font-semibold py-3",
                              disabled: isFetching(loginResponse[/* response */3]),
                              onClick: (function (e) {
                                  e.preventDefault();
                                  Curry._1(loginMutation, /* () */0);
                                  return /* () */0;
                                })
                            }, "ENTRAR")))));
}

var make = Login2;

export {
  reducer ,
  isFetching ,
  make ,
  
}
/* react Not a pure module */
