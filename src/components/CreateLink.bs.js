// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_exn from "bs-platform/lib/es6/js_exn.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as ReasonUrql from "reason-urql/src/ReasonUrql.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Hacker$BsFaker from "bs-faker/src/Hacker.bs.js";
import * as Internet$BsFaker from "bs-faker/src/Internet.bs.js";
import * as ReasonReactRouter from "reason-react/src/ReasonReactRouter.js";
import * as Caml_chrome_debugger from "bs-platform/lib/es6/caml_chrome_debugger.js";

var ppx_printed_query = "mutation PostMutation($description: String!, $url: String!)  {\npost(description: $description, url: $url)  {\nid  \ncreatedAt  \nurl  \ndescription  \npostedBy  {\nid  \nname  \n}\n\nvotes  {\nid  \nuser  {\nid  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "post");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var value$1 = Caml_option.valFromOption(match$2);
        var match$3 = Js_dict.get(value$1, "id");
        var tmp$1;
        if (match$3 !== undefined) {
          var value$2 = Caml_option.valFromOption(match$3);
          var match$4 = Js_json.decodeString(value$2);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field id on type Link is missing");
        }
        var match$5 = Js_dict.get(value$1, "createdAt");
        var match$6 = Js_dict.get(value$1, "url");
        var tmp$2;
        if (match$6 !== undefined) {
          var value$3 = Caml_option.valFromOption(match$6);
          var match$7 = Js_json.decodeString(value$3);
          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
        } else {
          tmp$2 = Js_exn.raiseError("graphql_ppx: Field url on type Link is missing");
        }
        var match$8 = Js_dict.get(value$1, "description");
        var tmp$3;
        if (match$8 !== undefined) {
          var value$4 = Caml_option.valFromOption(match$8);
          var match$9 = Js_json.decodeString(value$4);
          tmp$3 = match$9 !== undefined ? match$9 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$4));
        } else {
          tmp$3 = Js_exn.raiseError("graphql_ppx: Field description on type Link is missing");
        }
        var match$10 = Js_dict.get(value$1, "postedBy");
        var tmp$4;
        if (match$10 !== undefined) {
          var value$5 = Caml_option.valFromOption(match$10);
          var match$11 = Js_json.decodeNull(value$5);
          if (match$11 !== undefined) {
            tmp$4 = undefined;
          } else {
            var match$12 = Js_json.decodeObject(value$5);
            var tmp$5;
            if (match$12 !== undefined) {
              var value$6 = Caml_option.valFromOption(match$12);
              var match$13 = Js_dict.get(value$6, "id");
              var tmp$6;
              if (match$13 !== undefined) {
                var value$7 = Caml_option.valFromOption(match$13);
                var match$14 = Js_json.decodeString(value$7);
                tmp$6 = match$14 !== undefined ? match$14 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
              } else {
                tmp$6 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
              }
              var match$15 = Js_dict.get(value$6, "name");
              var tmp$7;
              if (match$15 !== undefined) {
                var value$8 = Caml_option.valFromOption(match$15);
                var match$16 = Js_json.decodeString(value$8);
                tmp$7 = match$16 !== undefined ? match$16 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
              } else {
                tmp$7 = Js_exn.raiseError("graphql_ppx: Field name on type User is missing");
              }
              tmp$5 = {
                id: tmp$6,
                name: tmp$7
              };
            } else {
              tmp$5 = Js_exn.raiseError("graphql_ppx: Object is not a value");
            }
            tmp$4 = Caml_option.some(tmp$5);
          }
        } else {
          tmp$4 = undefined;
        }
        var match$17 = Js_dict.get(value$1, "votes");
        var tmp$8;
        if (match$17 !== undefined) {
          var value$9 = Caml_option.valFromOption(match$17);
          var match$18 = Js_json.decodeArray(value$9);
          tmp$8 = match$18 !== undefined ? match$18.map((function (value) {
                    var match = Js_json.decodeObject(value);
                    if (match !== undefined) {
                      var value$1 = Caml_option.valFromOption(match);
                      var match$1 = Js_dict.get(value$1, "id");
                      var tmp;
                      if (match$1 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$1);
                        var match$2 = Js_json.decodeString(value$2);
                        tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                      } else {
                        tmp = Js_exn.raiseError("graphql_ppx: Field id on type Vote is missing");
                      }
                      var match$3 = Js_dict.get(value$1, "user");
                      var tmp$1;
                      if (match$3 !== undefined) {
                        var match$4 = Js_json.decodeObject(Caml_option.valFromOption(match$3));
                        if (match$4 !== undefined) {
                          var match$5 = Js_dict.get(Caml_option.valFromOption(match$4), "id");
                          var tmp$2;
                          if (match$5 !== undefined) {
                            var value$3 = Caml_option.valFromOption(match$5);
                            var match$6 = Js_json.decodeString(value$3);
                            tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                          } else {
                            tmp$2 = Js_exn.raiseError("graphql_ppx: Field id on type User is missing");
                          }
                          tmp$1 = {
                            id: tmp$2
                          };
                        } else {
                          tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                        }
                      } else {
                        tmp$1 = Js_exn.raiseError("graphql_ppx: Field user on type Vote is missing");
                      }
                      return {
                              id: tmp,
                              user: tmp$1
                            };
                    } else {
                      return Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                  })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$9));
        } else {
          tmp$8 = Js_exn.raiseError("graphql_ppx: Field votes on type Link is missing");
        }
        tmp = {
          id: tmp$1,
          createdAt: match$5 !== undefined ? Caml_option.valFromOption(match$5) : Js_exn.raiseError("graphql_ppx: Field createdAt on type Link is missing"),
          url: tmp$2,
          description: tmp$3,
          postedBy: tmp$4,
          votes: tmp$8
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field post on type Mutation is missing");
    }
    return {
            post: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(description, url, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "description",
                  description
                ],
                /* tuple */[
                  "url",
                  url
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var description = variables.description;
  var url = variables.url;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[
                /* tuple */[
                  "description",
                  description
                ],
                /* tuple */[
                  "url",
                  url
                ]
              ]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */Caml_chrome_debugger.localModule([], []);
}

var MT_Ret = /* module */Caml_chrome_debugger.localModule([], []);

var POST_MUTATION = /* module */Caml_chrome_debugger.localModule([
    "ppx_printed_query",
    "query",
    "parse",
    "make",
    "makeWithVariables",
    "ret_type",
    "MT_Ret"
  ], [
    ppx_printed_query,
    ppx_printed_query,
    parse,
    make,
    makeWithVariables,
    ret_type,
    MT_Ret
  ]);

function CreateLink(Props) {
  var match = React.useState((function () {
          return "";
        }));
  var setDescription = match[1];
  var description = match[0];
  var match$1 = React.useState((function () {
          return "";
        }));
  var setUrl = match$1[1];
  var url = match$1[0];
  var request = make(description, url, /* () */0);
  var match$2 = Curry._1(ReasonUrql.Hooks[/* useMutation */0], request);
  var executeMutation = match$2[1];
  var state = match$2[0];
  var handle = function (cb, $$event) {
    var value = $$event.target.value;
    return Curry._1(cb, (function (param) {
                  return value;
                }));
  };
  var logAll = function (param) {
    console.log(url);
    console.log(description);
    return /* () */0;
  };
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "flex flex-column mt3"
                }, React.createElement("input", {
                      className: "mb2",
                      placeholder: "A description for the link",
                      type: "text",
                      value: description,
                      onChange: (function (param) {
                          return handle(setDescription, param);
                        })
                    }), React.createElement("input", {
                      className: "mb2",
                      placeholder: "The URL for the link",
                      type: "text",
                      value: url,
                      onChange: (function (param) {
                          return handle(setUrl, param);
                        })
                    })), React.createElement("button", {
                  disabled: state[/* fetching */0],
                  onClick: (function (param) {
                      Curry._1(executeMutation, /* () */0);
                      Curry._1(setDescription, (function (param) {
                              return "";
                            }));
                      Curry._1(setUrl, (function (param) {
                              return "";
                            }));
                      return ReasonReactRouter.push("/");
                    })
                }, "Submit"), React.createElement("button", {
                  disabled: state[/* fetching */0],
                  onClick: (function (param) {
                      Curry._1(setDescription, (function (param) {
                              return Hacker$BsFaker.phrase(/* () */0);
                            }));
                      Curry._1(setUrl, (function (param) {
                              return Internet$BsFaker.url(/* () */0);
                            }));
                      logAll(/* () */0);
                      Curry._1(executeMutation, /* () */0);
                      return /* () */0;
                    })
                }, "createNewLink"));
}

var make$1 = CreateLink;

export {
  POST_MUTATION ,
  make$1 as make,
  
}
/* react Not a pure module */
